function best_mdl = regressorEnsemble(X, Y, kfold, path)
%% REGRESSORENSEMBLE Training an ensemble of regressors
% *Author*: Scott Campit
% 
% This function runs an ensemble of regressors for prototyping, although these 
% models are fine-tuned using k-fold cross validation and Bayesian hyperparameter 
% optimization. 
% 
% Currently, there are 6 statistical learning models that are encoded in this 
% function:
%% 
% # Robust least squares
% # Ridge regression
% # LASSO
% # Decision trees
% # Boosting
% # Random forests
%% 
% Note that a dependency in this script is MATLAB's Parallel Computing Toolbox. 
% If it is not possible to download, comment out the |'UseParallel', true, ...| 
% argument in the script.  
% 
% *INPUTS*
% 
% |X|: A numerical array containing the features as columns and samples as rows.
% 
% |Y|: A numerical array containing the targets as columns and samples as rows.
% 
% |kfold (optional)|: A scalar value denoting the number of k-splits for the 
% dataset.
% 
% *OUTPUT*
% 
% |model|: A structure of several machine learning models from hyperparameter 
% optimization.
    
    try % Convert to GPU array if possible. This may speed up computations downstream.
        X = gpuarray(X);
        Y = gpuarray(Y);
    catch ME
    end
    
    if isempty(kfold)
        kfold = 5;
    end
    
    if isempty(path)
        path = './';
    end
    
    % Initialize some files
    save(strcat(path, 'lm_mdls.mat'));
    save(strcat(path, 'ridge_mdls.mat'));
    save(strcat(path, 'lasso_mdls.mat'));
    save(strcat(path, 'dtr_mdls.mat'));
    save(strcat(path, 'rfr_mdls.mat'));
    save(strcat(path, 'lsb_mdls.mat'));
    save(strcat(path, 'svm_mdls.mat'));
    save(strcat(path, 'best_mdls.mat'));
    
    % Cross validation
    for i = 1:kfold
        
        % Generate cross validation indices from the Ytrain variable.
        idx = crossvalind('Kfold', size(Y, 1), kfold);        
        
        % Create cross-validation sets
        Xtrain2 = X(idx ~= i, :);
        Ytrain2 = Y(idx ~= i, :);
        Xtest2  = X(idx == i, :);
        Ytest2  = Y(idx == i, :);
        
        % Train and evaluate univariate models
        for j = 1:size(Y, 2) % Uses the parallel toolbox for hyperparameter optimization
            try
                model.lm_mdl{i, j}     = fitlm(Xtrain2, Ytrain2(:, j), ...
                                               'RobustOpts','on');               
                ypred2                 = predict(model.lm_mdl{i, j}, Xtest2);
                acc.lm_mdl(i, j)       = corr(ypred2, Ytest2(:, j));
                
                save(strcat(path, 'lm_mdls.mat'), ...
                     'i', 'j', 'model', 'acc', ...
                     '-append');
            catch ME
                model.lm_mdl{i, j} = NaN;
                acc.lm_mdl(i, j)   = NaN;
                save(strcat(path, 'lm_mdls.mat'), ...
                     'i', 'j', 'model', 'acc', ...
                     '-append');
            end
            
            model.ridge_mdl{i, j}  = fitrlinear(Xtrain2, Ytrain2(:, j), ...
                                           'Learner', 'leastsquares', ...
                                           'Regularization', 'ridge', ...
                                           'OptimizeHyperparameters', 'auto', ...
                                           'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.ridge_mdl{i, j}, Xtest2);
            acc.ridge_mdl(i, j)    = corr(ypred2, Ytest2(:, j));
            
            save(strcat(path, "ridge_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
                                                
            model.lasso_mdl{i, j}  = fitrlinear(Xtrain2, Ytrain2(:, j), ...
                                           'Learner', 'leastsquares', ...
                                           'Regularization', 'lasso', ...
                                           'OptimizeHyperparameters', 'auto', ...
                                           'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.lasso_mdl{i, j}, Xtest2);
            acc.lasso_mdl(i, j)    = corr(ypred2, Ytest2(:, j));
            
            save(strcat(path,"lasso_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
                                                
            model.dtr_mdl{i, j}    = fitrtree(Xtrain2, Ytrain2(:, j), ...
                                        'OptimizeHyperparameters', 'auto', ...
                                        'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.dtr_mdl{i, j}, Xtest2);
            acc.dtr_mdl(i, j)      = corr(ypred2, Ytest2(:, j));   
            
            save(strcat(path,"dtr_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
            
            model.lsb_mdl{i, j}    = fitrensemble(Xtrain2, Ytrain2(:, j), ...
                                             'Method', 'LSBoost', ...
                                             'OptimizeHyperparameters', {'NumLearningCycles', ...
                                                                    'LearnRate'}, ...
                                             'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.lsb_mdl{i, j}, Xtest2);
            acc.lsb_mdl(i, j)      = corr(ypred2, Ytest2(:, j));
            
            save(strcat(path, "lsb_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
                                                
            model.rfr_mdl{i, j}    = fitrensemble(Xtrain2, Ytrain2(:, j), ...
                                            'Method', 'Bag', ...
                                            'OptimizeHyperparameters', {'NumLearningCycles', ...
                                                                    'MinLeafSize', ...
                                                                    'MaxNumSplits'}, ...
                                             'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.rfr_mdl{i, j}, Xtest2);
            acc.rfr_mdl(i, j)      = corr(ypred2, Ytest2(:, j));
            
            save(strcat(path, "rfr_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
                                                
            model.svm_mdl{i, j}    = fitrsvm(Xtrain2, Ytrain2(:, j), ...
                                            'OptimizeHyperparameters', 'auto', ...
                                             'HyperparameterOptimizationOptions', ...
                                             struct('AcquisitionFunctionName', ...
                                                    'expected-improvement-plus', ...
                                                    'UseParallel', true, ...
                                                    'Verbose', 0, ...
                                                    'ShowPlots', false));
            ypred2                 = predict(model.svm_mdl{i, j}, Xtest2);
            acc.svm_mdl(i, j)      = corr(ypred2, Ytest2(:, j));
            
            save(strcat(path, "svm_mdls.mat"), ...
                 'i', 'j', 'model', 'acc', ...
                 '-append');
             
        end  
    end
    
    % Get the index with the maximum Pearson correlation coefficient
    [~, lm_idx] = max([acc.lm_mdl]);
    [~, ridge_idx] = max([acc.ridge_mdl]);
    [~, lasso_idx] = max([acc.lasso_mdl]);
    [~, dtr_idx] = max([acc.dtr_mdl]);
    [~, lsb_idx] = max([acc.lsb_mdl]);
    [~, rfr_idx] = max([acc.rfr_mdl]);
    [~, svm_idx] = max([acc.svm_mdl]);
    
    % Obtain best performing model from k-fold cross validation
    for k = 1:size(Y, 2)
        best_mdl.lm_mdl{k}    = model.lm_mdl{lm_idx(:, k), k};
        best_mdl.ridge_mdl{k} = model.ridge_mdl{ridge_idx(:, k), k};
        best_mdl.lasso_mdl{k} = model.lasso_mdl{lasso_idx(:, k), k};
        best_mdl.dtr_mdl{k}   = model.dtr_mdl{dtr_idx(:, k), k};
        best_mdl.lsb_mdl{k}   = model.lsb_mdl{lsb_idx(:, k), k};
        best_mdl.rfr_mdl{k}   = model.rfr_mdl{rfr_idx(:, k), k};
        best_mdl.svm_mdl{k}   = model.svm_mdl{svm_idx(:, k), k};
    end
    
    save(strcat(path, "best_mdls.mat"), ...
                 'best_mdl', ...
                 '-append');
end